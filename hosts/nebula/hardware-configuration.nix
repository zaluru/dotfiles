# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  boot = {
    tmp.cleanOnBoot = true;
    consoleLogLevel = 0;
    loader = {
      efi.canTouchEfiVariables = false;
      timeout = 1;
      grub = {
        forceInstall = true;
        useOSProber = false; # Make that an option
        memtest86.enable = true;
      };
    };
    initrd = {
      availableKernelModules = [
        # Provided by nixos-generate-config
        "xhci_pci"
        "ahci"
        "nvme"
        "usbhid"
        "usb_storage"
        "sd_mod"

        # Additional
        "rtsx_usb_sdmmc"
        "ehci_pci"
      ];
      kernelModules = [ ];
    };
    kernelModules = [
      "kvm-intel"
      "vfio-pci"
    ];
    extraModulePackages = [ ];
    # TODO: check those params
    kernelParams = [
      "intel_iommu=on"
      "iommu=pt"
      "loglevel=7"
      "quiet"
      "logo.nologo"
      "rootflags=noatime"
      "usbcore.autosuspend=-1"
      "rd.systemd.show_status=auto"
      "rd.udev.log_priority=3"
      "rd.udev.log_level=3"
    ];
    supportedFilesystems = [ "ntfs" ];
  };

  networking = {
    hostId = "add3b19b"; # For ZFS
    # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
    # (the default) this is the recommended approach. When using systemd-networkd it's
    # still possible to use this option, but it's recommended to use it in conjunction
    # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
    useDHCP = lib.mkDefault true;
  };
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.tailscale0.useDHCP = lib.mkDefault true;
  # networking.interfaces.vboxnet0.useDHCP = lib.mkDefault true;


  # Usefull links about gpu drivers for amd on nixos
  # https://nixos.org/manual/nixos/unstable/index.html#sec-gpu-accel-vulkan
  # https://wiki.nixos.org/wiki/Graphics
  # https://wiki.nixos.org/wiki/AMD_GPU

  # This specifies that the radv driver is the default one used
  # TODO: Check if i need to also add there 32bit vulkan driver path as shown here (i dont see both 64 and 32 bit, but i have them enabled hmm)
  # https://www.reddit.com/r/linux_gaming/comments/h8b7zv/comment/furvsmr/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
  #environment.variables.VK_ICD_FILENAMES = "/run/opengl-driver/share/vulkan/icd.d/radeon_icd.x86_64.json";
  # If i want to use a diffrent one i can run an application with the VK_ICD_FILENAMES pointing to the prefered one

  hardware = {
    graphics = {
      enable = true;
      enable32Bit = true;
      extraPackages = with pkgs; [
        #amdvlk # if i want to use this driver rather than radv for some cases

        # rocm required for davinci resolve - might also use opencl rusticl
        rocmPackages.clr.icd
        rocmPackages_6.clr
        rocmPackages_6.rocminfo
        rocmPackages_6.rocm-runtime
        #rocmPackages_5.clr
        #rocmPackages_5.rocminfo
        #rocmPackages_5.rocm-runtime

        # provides both rusticl and the old clover, clover breaks davinci resolve
        # can choose between rocm and opencl with
        # OCL_ICD_VENDORS=rusticl.icd davinci-resolve
        mesa.opencl
      ];
      extraPackages32 = with pkgs; [
        #driversi686Linux.amdvlk
      ];
    };
  };

  # TODO: move those to a module like amd opencl and rocm
  environment.variables = {
    RUSTICL_ENABLE = "radeonsi";
  };

  # Info about davinci resolve https://theholytachanka.com/posts/setting-up-resolve/
  # This is necesery because many programs hard-code the path to hip
  systemd.tmpfiles.rules = [
    "L+    /opt/rocm/hip   -    -    -     -    ${pkgs.rocmPackages_6.clr}"
  ];

  zramSwap = {
    enable = true;
    memoryPercent = 50;
    algorithm = "zstd";
  };

  disko.devices = {
    disk = {
      main = {
        type = "disk";
        device = "/dev/disk/by-id/ata-CT1000MX500SSD1_2134E5C51E7A";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              priority = 1;
              name = "ESP";
              start = "1M";
              end = "1G";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = [ "umask=0077" ];
              };
            };
            root = {
              size = "100%";
              content = {
                type = "btrfs";
                extraArgs = [ "-f" ]; # Override existing partition
                subvolumes = {
                  "/rootfs" = {
                    mountpoint = "/";
                  };
                  "/home" = {
                    mountOptions = [ "compress=zstd" ];
                    mountpoint = "/home";
                  };
                  "/home/zaluru" = { };
                  "/nix" = {
                    mountOptions = [
                      "compress=zstd"
                      "noatime"
                    ];
                    mountpoint = "/nix";
                  };
                  "/swap" = {
                    mountpoint = "/.swapvol";
                    swap = {
                      swapfile.size = "8G";
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
}